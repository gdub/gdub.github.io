<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Gary Wilson Jr. - python</title><link href="https://thegarywilson.com/" rel="alternate"></link><link href="https://thegarywilson.com/blog/feed/python.atom" rel="self"></link><id>https://thegarywilson.com/</id><updated>2013-04-07T02:57:24-05:00</updated><entry><title>A Survey on Software Quality</title><link href="https://thegarywilson.com/blog/2013/a-survey-on-software-quality/" rel="alternate"></link><published>2013-04-07T02:57:24-05:00</published><updated>2013-04-07T02:57:24-05:00</updated><author><name>Gary Wilson Jr.</name></author><id>tag:thegarywilson.com,2013-04-07:/blog/2013/a-survey-on-software-quality/</id><summary type="html">&lt;p&gt;Want to help me graduate, and make the software industry a better place for us all?&lt;/p&gt;
&lt;p&gt;Great!  I am writing my graduate report on the topic of software quality, metrics, and visualization.
The report will include a write-up on the results of the survey distributed here,
an evaluation of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Want to help me graduate, and make the software industry a better place for us all?&lt;/p&gt;
&lt;p&gt;Great!  I am writing my graduate report on the topic of software quality, metrics, and visualization.
The report will include a write-up on the results of the survey distributed here,
an evaluation of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how software-industry professionals define software quality&lt;/li&gt;
&lt;li&gt;how software methods, metrics, and visualizations are used within teams for software quality improvement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The survey is about 25 questions long and takes about 10 minutes
to complete.  You can find the survey at:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit April 10, 2013:&lt;/strong&gt; The survey is now closed, thanks to all that participated!&lt;/p&gt;
&lt;p&gt;I would appreciate your help in distributing this survey to others you know in
the software industry who would be interested in helping with this research on
software quality.  Results from the survey will be posted here next month.&lt;/p&gt;
&lt;p&gt;If interested in reading more on the subject, I encourage you to take a look
at my &lt;a class="reference external" href="/tags/metrics/"&gt;previous posts about metrics&lt;/a&gt;, including a case study of Django and
cyclomatic complexity metrics for Python code.&lt;/p&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
</content><category term="writing"></category><category term="django"></category><category term="grad school"></category><category term="metrics"></category><category term="python"></category><category term="quality"></category><category term="software engineering"></category><category term="survey"></category></entry><entry><title>Julython Kickoff</title><link href="https://thegarywilson.com/blog/2012/julython-kickoff/" rel="alternate"></link><published>2012-07-01T17:01:45-05:00</published><updated>2012-07-01T17:01:45-05:00</updated><author><name>Gary Wilson Jr.</name></author><id>tag:thegarywilson.com,2012-07-01:/blog/2012/julython-kickoff/</id><summary type="html">&lt;p&gt;Early this morning, a handful of developers here in &lt;a class="reference external" href="http://www.julython.org/location/austin-tx/"&gt;Austin, TX&lt;/a&gt; got together to kickoff &lt;a class="reference external" href="http://www.julython.org/"&gt;Julython&lt;/a&gt; over at &lt;a class="reference external" href="http://www.bennucoffee.com/"&gt;Bennu Coffee&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea of Julython is to work a little each day on the project(s) of your choice, and is based on &lt;a class="reference external" href="http://en.wikipedia.org/wiki/National_Novel_Writing_Month"&gt;National Novel Writing Month (a.k.a. NaNoWriMo …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Early this morning, a handful of developers here in &lt;a class="reference external" href="http://www.julython.org/location/austin-tx/"&gt;Austin, TX&lt;/a&gt; got together to kickoff &lt;a class="reference external" href="http://www.julython.org/"&gt;Julython&lt;/a&gt; over at &lt;a class="reference external" href="http://www.bennucoffee.com/"&gt;Bennu Coffee&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea of Julython is to work a little each day on the project(s) of your choice, and is based on &lt;a class="reference external" href="http://en.wikipedia.org/wiki/National_Novel_Writing_Month"&gt;National Novel Writing Month (a.k.a. NaNoWriMo)&lt;/a&gt;.  Getting started for Julython is easy, just head to &lt;a class="reference external" href="http://www.julython.org/"&gt;http://www.julython.org/&lt;/a&gt;, login with your twitter account, &lt;a class="reference external" href="http://www.julython.org/help/"&gt;setup your e-mail address and web hooks&lt;/a&gt;, hack, hack, hack, and start &lt;a class="reference external" href="http://www.julython.org/location/"&gt;racking up points&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I kicked off my Julython with a bug fix for &lt;a class="reference external" href="https://github.com/staale/python-xlsx"&gt;python-xlsx&lt;/a&gt; and a couple enhancements to &lt;a class="reference external" href="https://github.com/gdub/python-archive"&gt;python-archive&lt;/a&gt;.  Incidentally, I'll also be earning some points for this blog post, seeing as how it makes use of a &lt;a class="reference external" href="https://bitbucket.org/gdub/public"&gt;git repo&lt;/a&gt; for its backend.&lt;/p&gt;
</content><category term="writing"></category><category term="archive"></category><category term="julython"></category><category term="python"></category><category term="xlsx"></category></entry><entry><title>Software Metrics: A Django Case Study</title><link href="https://thegarywilson.com/blog/2012/software-metrics-a-django-case-study/" rel="alternate"></link><published>2012-03-23T02:48:51-05:00</published><updated>2012-03-23T02:48:51-05:00</updated><author><name>Gary Wilson Jr.</name></author><id>tag:thegarywilson.com,2012-03-23:/blog/2012/software-metrics-a-django-case-study/</id><summary type="html">&lt;p&gt;With the permission of the other authors, I'd like to share with you a couple of reports written for an assignment in the Software Measurement and Metrics graduate course I took last semester.
For this project, our class split into two teams that each performed their own case study on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the permission of the other authors, I'd like to share with you a couple of reports written for an assignment in the Software Measurement and Metrics graduate course I took last semester.
For this project, our class split into two teams that each performed their own case study on the &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django project&lt;/a&gt;.
The reports were submitted in November 2011, and thus analyzed code and bug data through about the end of October 2011.&lt;/p&gt;
&lt;p&gt;While I have &lt;a class="reference external" href="/blog/2006/cyclomatic-complexity-of-django/"&gt;previously analyzed Django's complexity&lt;/a&gt; (using a &lt;a class="reference external" href="/blog/2006/cyclomatic-complexity-for-python-code/"&gt;hack of some existing complexity scripts&lt;/a&gt;), the case studies presented here analyze several aspects of the Django project, including code size, code complexity, component quality, and test coverage.&lt;/p&gt;
&lt;div class="section" id="reports"&gt;
&lt;h2&gt;Reports&lt;/h2&gt;
&lt;p&gt;Below you will find excerpts describing the motivations for each report, followed by links to the full PDF versions of the reports.&lt;/p&gt;
&lt;div class="section" id="team-a"&gt;
&lt;h3&gt;Team A&lt;/h3&gt;
&lt;p&gt;Written by Eric Huneke, Brendan Long, and Gary Wilson Jr.&lt;/p&gt;
&lt;blockquote&gt;
This report describes our case study of Django, an open source web application framework written in Python. The overall goal of our study was a data-driven exploration of Django's code base, issue tracker, and wiki space, targeted to answer our research questions related to code size, complexity, and defect counts. We explored both the current state and the history of the Django project's artifacts, and produced several visualizations of the most interesting data.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://thegarywilson.com/blog/2012/software-metrics-a-django-case-study/django_case_study_team_a.pdf"&gt;Download report&lt;/a&gt; (815K, 19 pages).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="team-b"&gt;
&lt;h3&gt;Team B&lt;/h3&gt;
&lt;p&gt;Written by Kevin Boos, Richard Campbell, Evan Grim, and Hasanain A. Jwair.&lt;/p&gt;
&lt;blockquote&gt;
Our motivation for conducting this case study, aside from the obvious assignment requirements, is to answer a variety of research questions corresponding to several standard software metrics: code size, modularity, complexity, unit test coverage, and component quality relative to defect quantity. We believe that obtaining and analyzing data from the Django repositories and databases will allow us to generate graphical representations of important relationships between developer behavior, component organization, testing and debugging procedures, and a wide variety of other project characteristics. From these relationships, we can then draw conclusions about how to improve the software development process and other facets of the Django project.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://thegarywilson.com/blog/2012/software-metrics-a-django-case-study/django_case_study_team_b.pdf"&gt;Download report&lt;/a&gt; (2.4M, 25 pages).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;I encourage you to browse through the reports and their visualizations.  For the impatient, the teams' conclusions were as follows:&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Team A&lt;/h3&gt;
&lt;blockquote&gt;
This report presented the data we collected as part of a case study examining various aspects of Django, an open source web application framework. We found that the codebase has been growing at a steady rate since its start and will likely continue to grow. Overall complexity has been manageable, with just a few files containing egregiously complex functions. A refactoring effort focused on the files presented in table 4.1 is recommended. Ticket data relating to Django reflect basic intuitions about how they should behave. We were able to get a rough measure of component quality by looking at the number of tickets relating to each component, and showed that the top three components by ticket count (documentation, database layer, and contrib.admin) accounted for over 40% of all reported tickets. Test coverage of Django's components is high, with most components having at least 95% coverage. Coverage has trended upward for almost the entire project's history, and saw an extreme increase in the time periods before its 1.0 release.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Team B&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;This case study of the Django project, an open-source web development framework composed in Python, has presented a wide variety of statistically-significant data. To measure code size, rate of growth, complexity, and maintainability, we used Django's source control repository to analyze historical revisions since 2005. To analyze defect tracking, we looked at ticket records dating to the beginning of the Django project. For unit testing coverage, coding standards, and style guidelines analysis, we analyzed source code that was extracted from the Django subversion server on October 31, 2011.&lt;/p&gt;
&lt;p&gt;We found that the size of the project has greatly increased since its start, but that the rate of increase has decreased over time. The largest component with approximately half of the code is the contrib component which could be broken up into smaller, more manageable components. The overall cyclomatic complexity of Django is 2.49 which is respectable. Complexity started out nice and increased for the first few years, but has decreased since the initial increase. Some modules, though, have high complexities which should be reduced if possible.&lt;/p&gt;
&lt;p&gt;The ticket data showed that the majority of the tickets opened were for defects. When looking at only the defect tickets, we found 4 components out of 48 had almost 60% of the defects opened against them. The core and database components have the most defects per SLOC, so improving code quality in these areas will greatly reduce the overall number of defects in the Django project.&lt;/p&gt;
&lt;p&gt;As a whole, we found that the Django code is well covered by its test cases. The component with the lowest coverage, contrib.admin, was also found to be one of the components with the highest number of defects opened against it. Improving test coverage may reduce the number of tickets opened.&lt;/p&gt;
&lt;p&gt;We found that python coding standards and style conventions are poorly followed by Django developers. Additionally, Django code is poorly commented, only 7% of the total lines of the code base were comment lines. We also found that the amount of documentation is not consistent throughout the code elements, while most of the methods are documented, less than half the modules and classes have documentations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="writing"></category><category term="django"></category><category term="grad school"></category><category term="metrics"></category><category term="python"></category></entry><entry><title>Texas Python Regional Unconference</title><link href="https://thegarywilson.com/blog/2007/texas-python-regional-unconference/" rel="alternate"></link><published>2007-09-03T10:47:00-05:00</published><updated>2007-09-03T10:47:00-05:00</updated><author><name>Gary Wilson Jr.</name></author><id>tag:thegarywilson.com,2007-09-03:/blog/2007/texas-python-regional-unconference/</id><summary type="html">&lt;p&gt;Just a quick announcement for all the Houston and surrounding area Python lovers out there.  There is a &lt;a class="reference external" href="http://pycamp.python.org/Texas/HomePage"&gt;Texas Python Regional Unconference&lt;/a&gt; being held in a couple weeks (Sept. 15 - 16) at the University of Houston main campus.  Registration is free and as simple as adding your name to the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just a quick announcement for all the Houston and surrounding area Python lovers out there.  There is a &lt;a class="reference external" href="http://pycamp.python.org/Texas/HomePage"&gt;Texas Python Regional Unconference&lt;/a&gt; being held in a couple weeks (Sept. 15 - 16) at the University of Houston main campus.  Registration is free and as simple as adding your name to the &lt;a class="reference external" href="http://pycamp.python.org/Texas/Registration"&gt;registration wiki page&lt;/a&gt;.  I'll be there to talk or hack Django with anyone interested.  See you there!&lt;/p&gt;
</content><category term="writing"></category><category term="houston"></category><category term="python"></category><category term="texas"></category><category term="unconference"></category></entry><entry><title>Cyclomatic complexity for Python code</title><link href="https://thegarywilson.com/blog/2006/cyclomatic-complexity-for-python-code/" rel="alternate"></link><published>2006-07-09T00:37:00-05:00</published><updated>2006-07-09T00:37:00-05:00</updated><author><name>Gary Wilson Jr.</name></author><id>tag:thegarywilson.com,2006-07-09:/blog/2006/cyclomatic-complexity-for-python-code/</id><summary type="html">&lt;p&gt;We all know that maintenance is the biggest cost of software.  You can keep the maintenance cost of your program down by writing readable code.  More readable code means faster bug fixing, which leads to more time for adding new bugs.&lt;/p&gt;
&lt;p&gt;One measure of readability is &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;cyclomatic complexity&lt;/a&gt;, a software …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We all know that maintenance is the biggest cost of software.  You can keep the maintenance cost of your program down by writing readable code.  More readable code means faster bug fixing, which leads to more time for adding new bugs.&lt;/p&gt;
&lt;p&gt;One measure of readability is &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;cyclomatic complexity&lt;/a&gt;, a software metric that measures a program's complexity based on the number of distinct paths or branches in the code.  &lt;a class="reference external" href="http://www.sei.cmu.edu/str/descriptions/cyclomatic_body.html"&gt;Carnegie Mellon's Software Engineering Institute&lt;/a&gt; defines the following complexity risk levels:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="38%" /&gt;
&lt;col width="63%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Cyclomatic Complexity&lt;/th&gt;
&lt;th class="head"&gt;Risk Evaluation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1-10&lt;/td&gt;
&lt;td&gt;a simple program, without much risk&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;11-20&lt;/td&gt;
&lt;td&gt;more complex, moderate risk&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;21-50&lt;/td&gt;
&lt;td&gt;complex, high risk program&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;greater than 50&lt;/td&gt;
&lt;td&gt;untestable program (very high risk)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I have written a python script that takes &lt;a class="reference external" href="http://www.journyx.com/curt/complexity.html"&gt;these complexity scripts&lt;/a&gt; a bit further by printing the most complex functions/methods in an entire Python package specified on the command line.  Save the following as &lt;tt class="docutils literal"&gt;complexity.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Find the most complex functions/methods in your python code.&lt;/span&gt;

&lt;span class="sd"&gt;This program is offered freely into the public domain by&lt;/span&gt;
&lt;span class="sd"&gt;Gary Wilson (gary.wilson@gmail.com).&lt;/span&gt;

&lt;span class="sd"&gt;This code requires the complexity shell scripts found at&lt;/span&gt;
&lt;span class="sd"&gt;http://journyx.com/curt/complexity.html&lt;/span&gt;
&lt;span class="sd"&gt;Download the four files and then specify the path to the&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;complexity&amp;quot; script below, as PATH_TO_COMPLEXITY.&lt;/span&gt;

&lt;span class="sd"&gt;Note: To get the scripts to work for me I had to change the line&lt;/span&gt;
&lt;span class="sd"&gt;open (T,&amp;quot;|$dn/tab|sort -n +5&amp;quot;) || die &amp;quot;no tab?&amp;quot;;&lt;/span&gt;
&lt;span class="sd"&gt;to&lt;/span&gt;
&lt;span class="sd"&gt;open (T,&amp;quot;|$dn/tab|sort -n -k 6&amp;quot;) || die &amp;quot;no tab?&amp;quot;;&lt;/span&gt;
&lt;span class="sd"&gt;This line appears once in &amp;quot;complexdef&amp;quot; and twice in &amp;quot;complexdefclass&amp;quot;.&lt;/span&gt;

&lt;span class="sd"&gt;Example uses:&lt;/span&gt;

&lt;span class="sd"&gt;Search the current directory.&lt;/span&gt;
&lt;span class="sd"&gt;python complexity.py&lt;/span&gt;

&lt;span class="sd"&gt;Search the mypythonpackage package.&lt;/span&gt;
&lt;span class="sd"&gt;python complexity.py ~/mypythonpackage&lt;/span&gt;

&lt;span class="sd"&gt;You can also specify multiple files and/or directories.&lt;/span&gt;
&lt;span class="sd"&gt;python complexity.py ~/mypythonpackage /src/myscript.py&lt;/span&gt;

&lt;span class="sd"&gt;This script will search for all files ending in &amp;quot;.py&amp;quot; within the&lt;/span&gt;
&lt;span class="sd"&gt;paths specified on the command line.  All functions and methods will&lt;/span&gt;
&lt;span class="sd"&gt;be sorted by decreasing complexity and printed along with the&lt;/span&gt;
&lt;span class="sd"&gt;filename and number of lines of code.&lt;/span&gt;

&lt;span class="sd"&gt;By default, this script will print out all functions/methods found.&lt;/span&gt;
&lt;span class="sd"&gt;If you would rather only see functions/methods with a certain&lt;/span&gt;
&lt;span class="sd"&gt;complexity or above, then change the COMPLEXITY_LEVEL setting below.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;## User Settings ###########################################&lt;/span&gt;
&lt;span class="n"&gt;PATH_TO_COMPLEXITY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~/complex/complexity&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Only show functions/methods with a complexity greater than or&lt;/span&gt;
&lt;span class="c1"&gt;# equal to COMPLEXITY_LEVEL.  Setting to 0 will print all functions/methods.&lt;/span&gt;
&lt;span class="n"&gt;COMPLEXITY_LEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="c1"&gt;############################################################&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;complexity_for_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PATH_TO_COMPLEXITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;close_fds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;reached_functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;function_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Funcname|Classless_Function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;function_header&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;reached_functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;reached_functions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="c1"&gt;# We don&amp;#39;t want the header lines.&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="c1"&gt;# filename, function name, lines of code, and complexity.&lt;/span&gt;
            &lt;span class="n"&gt;tuples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tuples&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_functions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;complexity_for_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_column_widths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;widths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;widths&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])):&lt;/span&gt;
        &lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;widths&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_print_parms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;parms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;parms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;parms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;function_tuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expanduser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_to_functions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;function_tuples&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;complexity_for_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Filter out functions less than desired complexity level.&lt;/span&gt;
    &lt;span class="n"&gt;function_tuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;COMPLEXITY_LEVEL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# Sort by complexity.&lt;/span&gt;
    &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Showing functions/methods with complexity greater than or equal to &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;COMPLEXITY_LEVEL&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Filename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Function/Method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lines of Code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Complexity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;widths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_column_widths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_tuples&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%-*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%-*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%*s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;get_print_parms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%-*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%-*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%*s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;get_print_parms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;None.&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="writing"></category><category term="cyclomatic complexity"></category><category term="metrics"></category><category term="python"></category></entry></feed>