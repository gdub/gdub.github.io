<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Gary Wilson Jr. - metrics</title><link href="https://gdub.github.io/thegarywilson.com/" rel="alternate"></link><link href="https://gdub.github.io/thegarywilson.com/blog/feed/metrics.atom.xml" rel="self"></link><id>https://gdub.github.io/thegarywilson.com/</id><updated>2013-06-19T01:24:07-05:00</updated><entry><title>Software Quality Survey Results</title><link href="https://gdub.github.io/thegarywilson.com/blog/2013/software-quality-survey-results/" rel="alternate"></link><published>2013-06-19T01:24:07-05:00</published><updated>2013-06-19T01:24:07-05:00</updated><author><name>Gary Wilson Jr.</name></author><id>tag:gdub.github.io,2013-06-19:/thegarywilson.com/blog/2013/software-quality-survey-results/</id><summary type="html">&lt;p&gt;In April, &lt;a class="reference external" href="/blog/2013/software-quality-metrics-survey/"&gt;I conducted a survey&lt;/a&gt; to software professionals on the topic of software quality.  Today, I present the results from this survey, adapted from my final report.&lt;/p&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A literature review on software quality showed that software quality is a broad topic covering several factors, requiring a diverse set …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In April, &lt;a class="reference external" href="/blog/2013/software-quality-metrics-survey/"&gt;I conducted a survey&lt;/a&gt; to software professionals on the topic of software quality.  Today, I present the results from this survey, adapted from my final report.&lt;/p&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A literature review on software quality showed that software quality is a broad topic covering several factors, requiring a diverse set of metrics to adequately evaluate and control.  My goal with the survey to software professionals was to compare their opinions of the definition of software quality with the definitions found in the literature, and to understand how well-known and utilized software methods, metrics, and visualizations are within software teams.
Guiding questions for the survey included:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How do software professionals define quality?&lt;/li&gt;
&lt;li&gt;What methods do teams most frequently use for improving quality?&lt;/li&gt;
&lt;li&gt;How often do teams/companies manage quality through metrics and visualizations?&lt;/li&gt;
&lt;li&gt;How well do developers know available software quality metrics?&lt;/li&gt;
&lt;li&gt;How likely are software professionals to make use of metric visualization tools for monitoring software quality during software evolution?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The survey consisted of 23 questions, and was administered online using &lt;a class="reference external" href="http://kwiksurveys.com/"&gt;kwiksurveys&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In total, 75 responses across 21 countries and more than 17 companies—not all subjects specified their place of work—were accumulated.  The table below shows the full breakdown of the frequency of responses by country.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="4%" /&gt;
&lt;col width="96%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Count&lt;/th&gt;
&lt;th class="head"&gt;Countries&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;United States&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Germany&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Poland&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;United Kingdom&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Australia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;France&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Argentina, Austria, Canada, India&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Denmark, Hungary, Italy, Lithuania, Netherlands, Romania, Singapore, South Africa, Spain, Sweden, Switzerland&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Responders averaged 10.2 years of software industry experience and identified themselves into the following breakdown of job roles (approx.): 79% developers, 16% managers, 4% test/QA engineers, and 1% business analysts.&lt;/p&gt;
&lt;p&gt;Over half (50.7%) of the responders identified as working for a company with 6–50 employees, while another significant portion (30.7%) identified as working for companies with greater than 1,000 employees.
The vast majority of responders (89.3%) identified as working within teams of 10 or less, almost evenly split between a size of 1–5 (49.3%) and a size of 6–10 (40.0%).  See the tables below for the full distribution of responders' company and team sizes.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Company-size distribution.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="57%" /&gt;
&lt;col width="24%" /&gt;
&lt;col width="19%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Size&lt;/th&gt;
&lt;th class="head"&gt;Count&lt;/th&gt;
&lt;th class="head"&gt;%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;up to 5&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;up to 50&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;38.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;up to 250&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;10.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;up to 1,000&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;over 1,000&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;30.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Team-size distribution.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="47%" /&gt;
&lt;col width="29%" /&gt;
&lt;col width="24%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Size&lt;/th&gt;
&lt;th class="head"&gt;Count&lt;/th&gt;
&lt;th class="head"&gt;%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;up to 5&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;49.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;up to 10&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;40.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;over 10&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;10.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="quality"&gt;
&lt;h2&gt;Quality&lt;/h2&gt;
&lt;p&gt;When asked which definition best defines software quality, responders overwhelmingly choose &amp;quot;a broad mix of factors&amp;quot; (77%) over &amp;quot;fit of need&amp;quot; (17%) and &amp;quot;lack of defects&amp;quot; (5%); however, the latter two definitions weighted heavily in the responders' perceptions of quality.  When asked to rank a set of eight quality factors in how important the factors represent code quality, &lt;em&gt;Correctness&lt;/em&gt; and &lt;em&gt;Reliability&lt;/em&gt; were predominantly ranked first and second, respectively.
These results confirm the quality definitions found in the literature, with both the &lt;em&gt;Correctness&lt;/em&gt; (i.e. &amp;quot;fit of need&amp;quot;) and &lt;em&gt;Reliability&lt;/em&gt; (i.e. &amp;quot;defects&amp;quot;) attributes standing out from the others.
With quality in manufacturing very much tied to defects and reliability, it is interesting that, here, &amp;quot;lack of defects&amp;quot; was thought to be less important than &amp;quot;fit of need.&amp;quot;&lt;/p&gt;
&lt;p&gt;The figure below shows a graph of the rank selection distribution for how important the subjects felt each attribute represents quality.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://gdub.github.io/thegarywilson.com/blog/2013/software-quality-survey-results/figures/quality_attribute_ranks_1600_crop.png" /&gt;
&lt;p class="caption"&gt;Ranks given to attributes for importance in representing code quality.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The table below shows the attributes sorted by their weighted-average ranking.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Weighted-average ranks of how important each quality factor is in representing quality.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="38%" /&gt;
&lt;col width="26%" /&gt;
&lt;col width="18%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Quality factor&lt;/th&gt;
&lt;th class="head"&gt;Weighted-average rank (out of 8)&lt;/th&gt;
&lt;th class="head"&gt;Median rank (out of 8)&lt;/th&gt;
&lt;th class="head"&gt;Mode (out of 8)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Correctness&lt;/td&gt;
&lt;td&gt;1.76&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Reliability&lt;/td&gt;
&lt;td&gt;2.61&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Usability&lt;/td&gt;
&lt;td&gt;3.57&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Maintainability&lt;/td&gt;
&lt;td&gt;4.13&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Testability&lt;/td&gt;
&lt;td&gt;5.41&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Efficiency&lt;/td&gt;
&lt;td&gt;5.56&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Flexibility&lt;/td&gt;
&lt;td&gt;5.93&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Reusability&lt;/td&gt;
&lt;td&gt;6.97&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;By far, the most important attribute was &lt;em&gt;Correctness&lt;/em&gt;, which was placed in the first rank by nearly 70% of the subjects.  Second, third, and fourth ranks were also clearly shown to be &lt;em&gt;Reliability&lt;/em&gt;, &lt;em&gt;Usability&lt;/em&gt;, and &lt;em&gt;Maintainability&lt;/em&gt;, respectively.
&lt;em&gt;Reusability&lt;/em&gt; was clearly the lowest ranked factor, on average, while the remaining three factors (&lt;em&gt;Testability&lt;/em&gt;, &lt;em&gt;Efficiency&lt;/em&gt;, and &lt;em&gt;Flexibility&lt;/em&gt;) were tightly bunched between the fourth and eight ranked factors.  While most factors display a single peak within the rank positioning, &lt;em&gt;Efficiency&lt;/em&gt; was the only factor that demonstrated two distinct local-maxima (centered around ranks three and seven), suggesting that this factor may have importance in only certain environments or applications.&lt;/p&gt;
&lt;p&gt;Subjects were then asked to rank three popular trade-off factors (cost, quality, and schedule) in how influential the factors were for a typical software project at their company.
The responses predominantly showed &lt;em&gt;schedule&lt;/em&gt; ranked first, &lt;em&gt;quality&lt;/em&gt; ranked second, and &lt;em&gt;cost&lt;/em&gt; ranked third, with resulting weighted-rank averages of 1.69, 1.93, and 2.32 (out of 3), respectively.  The figure below shows the full rank distribution for all three factors.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://gdub.github.io/thegarywilson.com/blog/2013/software-quality-survey-results/figures/schedule_quality_cost_ranks_1600_crop.png" /&gt;
&lt;p class="caption"&gt;Rank distributions of schedule, quality, and cost influence for a typical software project.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In a follow-up question to responders who ranked either schedule or cost as more influential than quality, (summarized) reasons given for their selections included:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Typical projects involve fast-paced, exploratory prototyping.&lt;/li&gt;
&lt;li&gt;Schedule is typically driven by outside factors, such as dependent projects, partner relationships, or regulatory changes.&lt;/li&gt;
&lt;li&gt;Cost and/or schedule are typically the primary focus within contracts.&lt;/li&gt;
&lt;li&gt;Deadlines and schedule receive a high level of focus from management.&lt;/li&gt;
&lt;li&gt;Focus on low cost leads to situations such as the use of less experienced developers who lack the skills to improve quality, or a lack of proper management resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although quality was not ranked as a top consideration for software projects, it was reassuring to learn that the majority of subjects did report on their teams' regular use of multiple methods during the development and/or release process for improving quality.  The complete tally of responses can be seen in the table below.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;The use of methods during development and/or release processes for improving quality, sorted from most used to least used.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="67%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="8%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Method&lt;/th&gt;
&lt;th class="head"&gt;Count (of 75)&lt;/th&gt;
&lt;th class="head"&gt;%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Informal discussion with colleagues&lt;/td&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;84.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Automated testing&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;td&gt;78.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Human QA testing&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;td&gt;77.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Code reviews&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;56.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Pair programming&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;32.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Formal meetings&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;28.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Software metrics&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;17.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Other&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The most popular method used was &amp;quot;informal discussion with colleagues&amp;quot; (84.0%), followed closely by &amp;quot;automated testing&amp;quot; (78.7%) and &amp;quot;human quality assurance (QA) testing&amp;quot; (77.3%).  The least used method was &amp;quot;software metrics&amp;quot;, which received marks from only 17.3% of responders.
The two responses marked &amp;quot;Other&amp;quot; both made mention of static code-analysis tools.
The minimal use of metrics as a method for improving quality is disconcerting since it shows that most development teams do not quantitatively know if, or to what degree, their current quality improvement methods are helping them.&lt;/p&gt;
&lt;p&gt;When asked to elaborate on methods used for improving quality, including how and why they are used, the result was a wide range of responses, with most describing choices that were provided in the previous question.
Notable answers not included in the answer choices included: refactoring, bug monitoring, coding guidelines, stress-test tools, branching strategies (e.g. feature branching), and continuing education.
Additional insights gathered on choices that were presented include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Related to automated testing were mentions of test-driven development (TDD) and continuous integration.&lt;/li&gt;
&lt;li&gt;Several responses mentioned the fact that automated testing was either under-utilized within their software products, new to their environment, and/or undergoing active improvement.&lt;/li&gt;
&lt;li&gt;Those who mentioned pair programming indicated use of the method for complex or critical bugs and code changes.&lt;/li&gt;
&lt;li&gt;Informal discussions were utilized for completing complex bugs or features, identifying potential issues, learning from problems teammates were facing, and completing changes requiring quick turn-around.&lt;/li&gt;
&lt;li&gt;Code reviews were utilized during new projects, release/sprint iterations, and mentorship situations.&lt;/li&gt;
&lt;li&gt;Human QA testing was used for verifying software correctness and usability, validating releases, and building test plans.&lt;/li&gt;
&lt;li&gt;Responses mentioning formal meetings involved project reviews or retrospectives.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Out of the 75 total subjects, 10 (13.3%) responded that their team does not use any methods for improving quality.  Reasons cited included: tight deadlines, lack of time, lack of experience, bad tool support, non-production software, too many projects, lack of management, and team/company culture.  The multiple mentions of time constraints here align with the earlier results that show &lt;em&gt;schedule&lt;/em&gt; as a more influential trade-off factor on software projects over &lt;em&gt;quality&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="metrics"&gt;
&lt;h2&gt;Metrics&lt;/h2&gt;
&lt;p&gt;In the previous section, it was shown that software metrics was the least utilized method for improving quality as part of development processes.  However, when asked if their team currently utilizes any metrics for the intentional purpose of improving code quality, just over half of the responders (38 of 75) answered &amp;quot;yes.&amp;quot;&lt;/p&gt;
&lt;p&gt;The subjects were then asked how regularly their team used metrics to evaluate seven different areas, which represented a one-to-one mapping to the measurement goals derived in the Goal, Question, Metric (GQM) exercise (not presented here).
Answer choices were a frequency-type Likert scale with the following labels: Never, Rarely, Sometimes, Regularly, Constantly.  The figure below depicts the choice distributions for all seven measurement areas, and the table below shows the measurement areas sorted by most frequently used (a weighted-average ordering assuming approximately equal intervals of the frequency-type Likert scale, with values 1 to 5 representing &amp;quot;Never&amp;quot; to &amp;quot;Constantly&amp;quot;, respectively).&lt;/p&gt;
&lt;div class="figure align-center" id="figure-measurement-goal-frequency"&gt;
&lt;img alt="" src="https://gdub.github.io/thegarywilson.com/blog/2013/software-quality-survey-results/figures/measurement_frequency_1600_crop.png" /&gt;
&lt;p class="caption"&gt;Distributions of the frequency that teams make use of metrics to address measurement goals presented in GQM exercise.&lt;/p&gt;
&lt;/div&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Frequency that teams make use of metrics to address measurement goals presented in GQM exercise.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="40%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="34%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Object of measurement&lt;/th&gt;
&lt;th class="head"&gt;Mode&lt;/th&gt;
&lt;th class="head"&gt;Median&lt;/th&gt;
&lt;th class="head"&gt;Weighted rank (out of 5)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Issues in issue database&lt;/td&gt;
&lt;td&gt;Regularly&lt;/td&gt;
&lt;td&gt;Sometimes&lt;/td&gt;
&lt;td&gt;2.99&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Test suites or benchmarks&lt;/td&gt;
&lt;td&gt;Never&lt;/td&gt;
&lt;td&gt;Sometimes&lt;/td&gt;
&lt;td&gt;2.67&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Maintenance effort performed&lt;/td&gt;
&lt;td&gt;Never&lt;/td&gt;
&lt;td&gt;Rarely&lt;/td&gt;
&lt;td&gt;2.39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Modularity of software&lt;/td&gt;
&lt;td&gt;Never&lt;/td&gt;
&lt;td&gt;Rarely&lt;/td&gt;
&lt;td&gt;2.20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Adequacy of documentation&lt;/td&gt;
&lt;td&gt;Never&lt;/td&gt;
&lt;td&gt;Rarely&lt;/td&gt;
&lt;td&gt;1.89&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Complexity of software&lt;/td&gt;
&lt;td&gt;Rarely&lt;/td&gt;
&lt;td&gt;Rarely&lt;/td&gt;
&lt;td&gt;1.88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Size of software&lt;/td&gt;
&lt;td&gt;Never&lt;/td&gt;
&lt;td&gt;Rarely&lt;/td&gt;
&lt;td&gt;1.87&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;While over half of the responders answered &amp;quot;yes&amp;quot; to currently utilizing metrics for improving code quality, they did so at a very low frequency in each of the measurement areas questioned.  Only two areas (&lt;em&gt;issues in issue database&lt;/em&gt; and &lt;em&gt;test suites or benchmarks&lt;/em&gt;) had a median frequency above &amp;quot;Rarely,&amp;quot; and were also not much more utilized themselves with a median frequency of &amp;quot;Sometimes.&amp;quot;  Likewise, only two areas had a most-selected frequency above &amp;quot;Never&amp;quot;—&lt;em&gt;complexity of software&lt;/em&gt; had a mode of &amp;quot;Rarely&amp;quot; and &lt;em&gt;issues in issue database&lt;/em&gt; had a mode of &amp;quot;Regularly.&amp;quot;
&lt;em&gt;Issues in issue database&lt;/em&gt; was the most-frequently utilized metric area, clearly seen as on outlier within the &amp;quot;Regularly&amp;quot; frequency choice in &lt;a class="reference internal" href="#figure-measurement-goal-frequency"&gt;Figure measurement goal frequency&lt;/a&gt;.  In fact, aside from that single outlying point, there is no metric area for the &amp;quot;Regularly&amp;quot; and &amp;quot;Constantly&amp;quot; frequencies that had more selections than the least-selected metric area for the &amp;quot;Rarely&amp;quot; and &amp;quot;Never&amp;quot; frequencies.&lt;/p&gt;
&lt;p&gt;Next, the subjects were asked to rate their knowledge and use of 28 different metrics on a Likert scale consisting of the four choices: Never heard of or do not know, Know of but have not used, Have used before, and Use regularly.
The list of metrics used for the survey was primarily taken from a GQM derivation (omitted from this post), and was found throughout a range of topics in the software engineering literature, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;software sizing and effort &lt;a class="footnote-reference" href="#albrecht-1979-measuring-productivity" id="id1"&gt;[1]&lt;/a&gt; &lt;a class="footnote-reference" href="#albrecht-1983-softwarefunction" id="id2"&gt;[2]&lt;/a&gt; &lt;a class="footnote-reference" href="#halstead-1977-softwarescience" id="id3"&gt;[19]&lt;/a&gt; &lt;a class="footnote-reference" href="#leffingwell-2003-managingrequirements" id="id4"&gt;[24]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;complexity &lt;a class="footnote-reference" href="#banker-1993-complexityandmaintenance" id="id5"&gt;[4]&lt;/a&gt; &lt;a class="footnote-reference" href="#gonzalez-1995-unifiedmetriccomplexity" id="id6"&gt;[17]&lt;/a&gt; &lt;a class="footnote-reference" href="#mccabe-1976-complexity" id="id7"&gt;[26]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;defects &lt;a class="footnote-reference" href="#basili-2001-experiencebase" id="id8"&gt;[7]&lt;/a&gt; &lt;a class="footnote-reference" href="#nagappan-2005-codechurn" id="id9"&gt;[27]&lt;/a&gt; &lt;a class="footnote-reference" href="#fenton-1999-defectprediction" id="id10"&gt;[13]&lt;/a&gt; &lt;a class="footnote-reference" href="#gray-1986-mtbf" id="id11"&gt;[18]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;code duplication &lt;a class="footnote-reference" href="#lague-1997-functionclone" id="id12"&gt;[23]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;testing &lt;a class="footnote-reference" href="#horgan-1994-testingcoverage" id="id13"&gt;[21]&lt;/a&gt; &lt;a class="footnote-reference" href="#williams-2001-codecoverage" id="id14"&gt;[32]&lt;/a&gt; &lt;a class="footnote-reference" href="#demillo-1978-testdataselection" id="id15"&gt;[10]&lt;/a&gt; &lt;a class="footnote-reference" href="#andrews-2005-mutationtesting" id="id16"&gt;[3]&lt;/a&gt; &lt;a class="footnote-reference" href="#weyuker-2000-performancetesting" id="id17"&gt;[31]&lt;/a&gt; &lt;a class="footnote-reference" href="#vokolos-1998-performancetesting" id="id18"&gt;[30]&lt;/a&gt; &lt;a class="footnote-reference" href="#zhu-1997-testcoverage" id="id19"&gt;[33]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;evolution &lt;a class="footnote-reference" href="#fluri-2007-codecomments" id="id20"&gt;[15]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;coupling &lt;a class="footnote-reference" href="#gall-1998-logicalcoupling" id="id21"&gt;[16]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cohesion and object-oriented design &lt;a class="footnote-reference" href="#chidamber-1994-metrics-oodesign" id="id22"&gt;[9]&lt;/a&gt; &lt;a class="footnote-reference" href="#basili-1996-validation-oometrics" id="id23"&gt;[6]&lt;/a&gt; &lt;a class="footnote-reference" href="#briand-1998-cohesionmeasurement" id="id24"&gt;[8]&lt;/a&gt; &lt;a class="footnote-reference" href="#rosenberg-1997-oometrics" id="id25"&gt;[29]&lt;/a&gt; &lt;a class="footnote-reference" href="#eabreu-1994-oometrics" id="id26"&gt;[11]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;information flow &lt;a class="footnote-reference" href="#henry-1981-informationflow" id="id27"&gt;[20]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;people and organizational structure &lt;a class="footnote-reference" href="#nagappan-2008-orgstructure" id="id28"&gt;[28]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;various combinations of the proceeding topics &lt;a class="footnote-reference" href="#basili-1984-errorsandcomplexity" id="id29"&gt;[5]&lt;/a&gt; &lt;a class="footnote-reference" href="#fenton-2000-faultsandfaiures" id="id30"&gt;[14]&lt;/a&gt; &lt;a class="footnote-reference" href="#lipow-1982-faultsperloc" id="id31"&gt;[25]&lt;/a&gt; &lt;a class="footnote-reference" href="#zimmerman-2011-dependency-neighborhoods" id="id32"&gt;[34]&lt;/a&gt; &lt;a class="footnote-reference" href="#jacob-2003-codereview" id="id33"&gt;[22]&lt;/a&gt; &lt;a class="footnote-reference" href="#fenton-1991-softwaremetrics" id="id34"&gt;[12]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The table below shows the full count (and percentage) breakdown of responses for each metric.  The data is sorted by highest weighted average (assuming approximate equal intervals of a Likert scale, weighted from 1 to 4 representing the selections &amp;quot;Never heard of or do not know&amp;quot; to &amp;quot;Use regularly&amp;quot;), which allows identification of the central tendency of selections for each metric.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;The knowledge and use of 28 different metrics, sorted by most frequently used and well-known.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="32%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="8%" /&gt;
&lt;col width="8%" /&gt;
&lt;col width="5%" /&gt;
&lt;col width="6%" /&gt;
&lt;col width="5%" /&gt;
&lt;col width="5%" /&gt;
&lt;col width="12%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;Metric&lt;/th&gt;
&lt;th class="head" colspan="2"&gt;Never heard of or do not know&lt;/th&gt;
&lt;th class="head" colspan="2"&gt;Know of but have not used&lt;/th&gt;
&lt;th class="head" colspan="2"&gt;Have used before&lt;/th&gt;
&lt;th class="head" colspan="2"&gt;Use regularly&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Weighted average
(out of 4)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;Count&lt;/th&gt;
&lt;th class="head"&gt;%&lt;/th&gt;
&lt;th class="head"&gt;Count&lt;/th&gt;
&lt;th class="head"&gt;%&lt;/th&gt;
&lt;th class="head"&gt;Count&lt;/th&gt;
&lt;th class="head"&gt;%&lt;/th&gt;
&lt;th class="head"&gt;Count&lt;/th&gt;
&lt;th class="head"&gt;%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Unit test failures or pass/fail ratio&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;13.3&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;38.7&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;42.7&lt;/td&gt;
&lt;td&gt;3.19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Line coverage&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6.7&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;32.0&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;40.0&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;21.3&lt;/td&gt;
&lt;td&gt;2.76&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Lines of code&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2.7&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;38.7&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;42.7&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2.72&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Number of classes/functions/files/modules&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6.7&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;42.7&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;36.0&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;14.7&lt;/td&gt;
&lt;td&gt;2.59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Branch/path coverage&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;18.7&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;33.3&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;34.7&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;13.3&lt;/td&gt;
&lt;td&gt;2.43&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Duplicated code (or code clone) percentage&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;44.0&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;36.0&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2.40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Defect count or distribution&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;18.7&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;50.7&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;21.3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;9.3&lt;/td&gt;
&lt;td&gt;2.21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Time-to-fix defect&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;17.3&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;58.7&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;17.3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6.7&lt;/td&gt;
&lt;td&gt;2.13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cyclomatic complexity&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;29.3&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;34.7&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;30.7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;2.12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Depth of nesting&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;20.0&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;50.7&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;28.0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1.3&lt;/td&gt;
&lt;td&gt;2.11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Function points or similar&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;38.7&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;32.0&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;22.7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6.7&lt;/td&gt;
&lt;td&gt;1.97&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Coupling&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;34.7&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;38.7&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;22.7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;1.96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Depth of inheritance tree&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;26.7&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;52.0&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;20.0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1.3&lt;/td&gt;
&lt;td&gt;1.96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cohesion (or lack of cohesion)&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;36.0&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;41.3&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;18.7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;1.91&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Defect density&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;32.0&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;53.3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6.7&lt;/td&gt;
&lt;td&gt;1.89&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Mean time between defect/error&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;24.0&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;65.3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2.7&lt;/td&gt;
&lt;td&gt;1.89&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Code churn, turnover ratio, or edit frequency&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;34.7&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;52.0&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;13.3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.79&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Number of engineers&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;40.0&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;45.3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;10.7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;1.79&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Fan-in and fan-out (class/module dependencies)&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;50.7&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;32.0&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;14.7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2.7&lt;/td&gt;
&lt;td&gt;1.69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Number of ex-engineers&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;46.7&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;45.3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2.7&lt;/td&gt;
&lt;td&gt;1.64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Defect slippage ratio&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;54.7&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;40.0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Percentage of org contributing to development&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;64.0&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;30.7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.41&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Overall organization ownership&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;td&gt;72.0&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;22.7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Level of organizational code ownership&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;74.7&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;20.0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Depth of master ownership&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;td&gt;78.7&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Halstead metrics&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;td&gt;77.3&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;21.3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1.3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Mutant killing percentage&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;80.0&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;17.3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2.7&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Organization intersection factor&lt;/td&gt;
&lt;td&gt;61&lt;/td&gt;
&lt;td&gt;81.3&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;14.7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;From the data collected, several insights were captured:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No metric was used regularly by a majority of the responders.  The only metric that came close (42.7%) was &lt;em&gt;Unit test failures or pass/fail ratio&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Only four metrics have been used before or were used regularly by a majority of responders: &lt;em&gt;Unit test failures or pass/fail ratio&lt;/em&gt;, &lt;em&gt;Line coverage&lt;/em&gt;, &lt;em&gt;Lines of code&lt;/em&gt;, and &lt;em&gt;Number of classes/functions/files/modules&lt;/em&gt;.  These four metrics were also the only ones that were both unknown to less than 10% of responders and used regularly by more than 10% of responders.&lt;/li&gt;
&lt;li&gt;Aside from the four metrics mentioned in the previous bullet, &lt;em&gt;Branch/path coverage&lt;/em&gt; was the only other metric that was used regularly by more than 10% of the responders; however, a higher percentage of responders (19%) had never heard of this metric (about three times more than the four metrics mentioned above).&lt;/li&gt;
&lt;li&gt;Several metrics were highly known, yet not used before or used regularly, including: &lt;em&gt;Mean time between defect/error&lt;/em&gt;, &lt;em&gt;Time-to-fix defect&lt;/em&gt;, &lt;em&gt;Defect density&lt;/em&gt;, &lt;em&gt;Code churn&lt;/em&gt;, &lt;em&gt;Depth of inheritance tree&lt;/em&gt;, &lt;em&gt;Depth of nesting&lt;/em&gt;, and &lt;em&gt;Defect count or distribution&lt;/em&gt;.  It us unknown, however, if the high levels of knowledge of these metrics are due to familiarity of their use within the software industry or rather due to the ease of which their definitions can be gleaned from their names.&lt;/li&gt;
&lt;li&gt;Nearly one-third of the metrics presented were completely unknown by a majority of responders, with most metrics in this group used regularly by zero responders and used before by about 5% or less of responders.  Metrics in this group consisted of &lt;em&gt;Fan-in and fan-out&lt;/em&gt;, &lt;em&gt;Defect slippage ratio&lt;/em&gt;, &lt;em&gt;Halstead metrics&lt;/em&gt;, &lt;em&gt;Mutant killing percentage&lt;/em&gt;, and several of the people and organizational metrics described by Zimmermann et. al &lt;a class="footnote-reference" href="#zimmerman-2011-dependency-neighborhoods" id="id35"&gt;[34]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The final two questions in the survey related to metrics were on the topic of the use of metrics to evaluate employee performance.  About 15% of responders indicated that their company uses software metrics for evaluating employee performance.  Surprisingly, nearly twice that amount (28.0%) either agreed or strongly agreed with the use of metrics for evaluating employee performance.
The full results can been seen in the table below, broken down by manager and non-manager roles (as identified earlier in the survey, see &lt;a class="reference internal" href="#background"&gt;Background&lt;/a&gt;).&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Level to which responders agree with using software metrics to evaluate employee performance, broken down by manager and non-manager roles.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="12%" /&gt;
&lt;col width="11%" /&gt;
&lt;col width="8%" /&gt;
&lt;col width="19%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;Role&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Count&lt;/th&gt;
&lt;th class="head" colspan="5"&gt;Percentage of Responders&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;Strongly Disagree&lt;/th&gt;
&lt;th class="head"&gt;Disagree&lt;/th&gt;
&lt;th class="head"&gt;Neutral&lt;/th&gt;
&lt;th class="head"&gt;Agree&lt;/th&gt;
&lt;th class="head"&gt;Strongly Agree&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Managers&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;16.7&lt;/td&gt;
&lt;td&gt;16.7&lt;/td&gt;
&lt;td&gt;8.3&lt;/td&gt;
&lt;td&gt;50.0&lt;/td&gt;
&lt;td&gt;8.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Non-managers&lt;/td&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;17.5&lt;/td&gt;
&lt;td&gt;23.8&lt;/td&gt;
&lt;td&gt;36.5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;17.3&lt;/td&gt;
&lt;td&gt;22.7&lt;/td&gt;
&lt;td&gt;32.0&lt;/td&gt;
&lt;td&gt;24.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;From the manager vs. non-manager results, we expectedly see that those in manager roles were much more likely to agree (50.0%) or strongly agree (8.3%) than were those in non-manager roles.  Those in non-manager roles were most likely to be neutral (32.0%) or to disagree (23.8%).  Both manager and non-manager roles differed by less than 1% in the strongly disagree segment and, in aggregate, very few (4.0%) responders identified as strongly agreeing with the use of metrics for employee performance evaluation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="visualization"&gt;
&lt;h2&gt;Visualization&lt;/h2&gt;
&lt;p&gt;The survey to software professionals also included four questions on the topic of visualizing software metrics.
Overall, responders overwhelmingly felt that it would be useful to visualize metrics about their software projects over time, with over 81% who either agreed or strongly agreed with this statement and less than 6% who either disagreed or strongly disagreed.  However, when asked if their team currently uses any tools to visualize software metrics over time, less than 30% answered &amp;quot;yes.&amp;quot;
In a similar question, subjects were asked how likely they would be to use a software metrics visualization tool to help improve the quality of software they write.  Here, responders were also positive, albeit slightly less enthusiastic.  The majority of responders fell into the likely (42.7%) or neutral (25.3%) segments, with an equal percentage (14.6%) in both the unlikely and very likely segments.  The full results for these two questions can be seen in the tables below.&lt;/p&gt;
&lt;!-- table_metrics_over_time: --&gt;
&lt;!-- table: Percentage of responders by how useful it would be to visualize metrics about software projects over time.

================= ======== ======= ===== ==============
Strongly Disagree Disagree Neutral Agree Strongly Agree
================= ======== ======= ===== ==============
2.7               2.7      13.3    54.7  26.7
================= ======== ======= ===== ============== --&gt;
&lt;!-- table_visualization_tool: --&gt;
&lt;!-- table: Percentage of responders by how likely they would be to use a software metrics visualization tool to improve the quality of software they write.

============= ======== ======= ====== ===========
Very Unlikely Unlikely Neutral Likely Very Likely
============= ======== ======= ====== ===========
2.7           14.7     25.3    42.7   14.7
============= ======== ======= ====== =========== --&gt;
&lt;p&gt;From these results, combined with the earlier result that just over half of the responders answering &amp;quot;yes&amp;quot; to their team currently utilizing metrics for improving code quality, there clearly exists a gap between those who use metrics and those who use metrics visualizations.
Additionally, the positive responses to the perceived usefulness of metrics visualizations, and willingness to use metrics visualizations, suggests there is opportunity and demand for such tools.&lt;/p&gt;
&lt;p&gt;On the topic of visualization tools, subjects were asked how they would like to use such a tool (see figure below for a chart of all responses).  The most popular choices, selected by about 61--71% of the responders, were: &lt;em&gt;integrated into build/test server&lt;/em&gt;, &lt;em&gt;integrated into issue tracker&lt;/em&gt;, and &lt;em&gt;a self-hosted, stand-alone product with web interface&lt;/em&gt;.  Least popular were: &lt;em&gt;integrated into editor/IDE&lt;/em&gt; and &lt;em&gt;a hosted service with web interface&lt;/em&gt;.  Four responders filled in a selection for &lt;em&gt;other&lt;/em&gt;, mentioning a dedicated build server, as well as a script or command-line interface.&lt;/p&gt;
&lt;!-- figure_howtouse_metrics_tool: --&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://gdub.github.io/thegarywilson.com/blog/2013/software-quality-survey-results/figures/howtouse_visualization_tool_1600_crop.png" /&gt;
&lt;p class="caption"&gt;Number of responses on how subjects would like to use a tool for calculating and visualizing metrics describing their software.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="albrecht-1979-measuring-productivity" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Allan J. Albrecht. Measuring application development productivity. In &lt;em&gt;Proceedings of the Joint SHARE/GUIDE/IBM Application Development Symposium&lt;/em&gt;, volume 10, pages 83–92. SHARE Inc. and GUIDE International Corp. Monterey, CA, 1979.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="albrecht-1983-softwarefunction" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Allan J. Albrecht and John E. Gaffney. Software function, source lines of code, and development effort prediction: A software science validation. &lt;em&gt;Software Engineering, IEEE Transactions on&lt;/em&gt;, SE-9(6):639–648, 1983.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="andrews-2005-mutationtesting" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id16"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;J. H. Andrews, L. C. Briand, and Y. Labiche. Is mutation an appropriate tool for testing experiments? In &lt;em&gt;Software Engineering, 2005&lt;/em&gt;. &lt;em&gt;ICSE 2005&lt;/em&gt;. &lt;em&gt;Proceedings. 27th International Conference on&lt;/em&gt;, pages 402–411, 2005.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="banker-1993-complexityandmaintenance" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Rajiv D. Banker, Srikant M. Datar, Chris F. Kemerer, and Dani Zweig. Software complexity and maintenance costs. &lt;em&gt;Commun. ACM&lt;/em&gt;, 36(11):81–94, Nov. 1993.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="basili-1984-errorsandcomplexity" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id29"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Victor R. Basili and Barry T. Perricone. Software errors and complexity: an empirical investigation. &lt;em&gt;Communications of the ACM&lt;/em&gt;, 27(1):42–52, Jan. 1984.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="basili-1996-validation-oometrics" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id23"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Victor R. Basili, Lionel C. Briand, and  Walcélio L. Melo. A validation of object-oriented design metrics as quality indicators. &lt;em&gt;Software Engineering, IEEE Transactions on&lt;/em&gt;, 22(10):751–761, 1996.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="basili-2001-experiencebase" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Victor Basili, Roseanne Tesoriero, Patricia Costa, Mikael Lindvall, Ioana Rus, Forrest Shull, and Marvin Zelkowitz. Building an experience base for software engineering: A report on the first cebase eworkshop. In Frank Bomarius and Seija Komi-Sirviö, editors, &lt;em&gt;Product Focused Software Process Improvement&lt;/em&gt;, volume 2188 of &lt;em&gt;Lecture Notes in Computer Science&lt;/em&gt;, pages 110–125. Springer-Verlag Berlin Heidelberg, 2001.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="briand-1998-cohesionmeasurement" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id24"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Lionel C. Briand, John W. Daly, and Jürgen Wüst. A unified framework for cohesion measurement in object-oriented systems. &lt;em&gt;Empirical Software Engineering&lt;/em&gt;, 3(1):65–117, 1998.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="chidamber-1994-metrics-oodesign" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id22"&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Shyam R. Chidamber and Chris F. Kemerer. A metrics suite for object oriented design. &lt;em&gt;Software Engineering, IEEE Transactions on&lt;/em&gt;, 20(6):476–493, 1994.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="demillo-1978-testdataselection" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id15"&gt;[10]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Richard A. DeMillo, Richard J. Lipton, and Frederick G. Sayward. Hints on test data selection: Help for the practicing programmer. &lt;em&gt;Computer&lt;/em&gt;, 11(4):34–41, 1978.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="eabreu-1994-oometrics" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id26"&gt;[11]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Fernando Brito e Abreu and Rogério Carapuça. Candidate metrics for object-oriented software within a taxonomy framework. &lt;em&gt;Journal of Systems and Software&lt;/em&gt;, 26(1):87–96, 1994.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="fenton-1991-softwaremetrics" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id34"&gt;[12]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Norman E. Fenton and Shari Lawrence Pfleeger. &lt;em&gt;Software metrics&lt;/em&gt;, volume 1. Chapman &amp;amp; Hall, 1991.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="fenton-1999-defectprediction" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id10"&gt;[13]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Norman E. Fenton and Martin Neil. A critique of software defect prediction models. &lt;em&gt;Software Engineering, IEEE Transactions on&lt;/em&gt;, 25(5):675–689, 1999.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="fenton-2000-faultsandfaiures" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id30"&gt;[14]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Norman E. Fenton and N. Ohlsson. Quantitative analysis of faults and failures in a complex software system. &lt;em&gt;Software Engineering, IEEE Transactions on&lt;/em&gt;, 26(8):797–814, 2000.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="fluri-2007-codecomments" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id20"&gt;[15]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Beat Fluri, Michael Würsch, and Harald C. Gall. Do code and comments co-evolve? on the relation between source code and comment changes. In &lt;em&gt;Reverse Engineering, 2007. WCRE 2007. 14th Working Conference on&lt;/em&gt;, pages 70–79, 2007.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="gall-1998-logicalcoupling" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id21"&gt;[16]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Harald Gall, Karin Hajek, and Mehdi Jazayeri. Detection of logical coupling based on product release history. In &lt;em&gt;Software Maintenance&lt;/em&gt;, 1998. &lt;em&gt;Proceedings., International Conference on&lt;/em&gt;, pages 190–198, 1998.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="gonzalez-1995-unifiedmetriccomplexity" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[17]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Renato R. Gonzalez. A unified metric of software complexity: Measuring productivity, quality, and value. &lt;em&gt;Journal of Systems and Software&lt;/em&gt;, 29(1):17–37, 1995.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="gray-1986-mtbf" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id11"&gt;[18]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Jim Gray. Why do computers stop and what can be done about it? Technical Report 85.7, Tandom Computers, June 1985.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="halstead-1977-softwarescience" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[19]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Maurice H. Halstead. &lt;em&gt;Elements of Software Science (Operating and programming systems series)&lt;/em&gt;. Elsevier Science Inc., New York, NY, USA, 1977.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="henry-1981-informationflow" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id27"&gt;[20]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Sallie Henry and Dennis Kafura. Software structure metrics based on information flow. &lt;em&gt;Software Engineering, IEEE Transactions on&lt;/em&gt;, SE-7(5):510–518, 1981.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="horgan-1994-testingcoverage" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id13"&gt;[21]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Joseph R. Horgan, Saul London, and Michael R. Lyu. Achieving software quality with testing coverage measures. &lt;em&gt;Computer&lt;/em&gt;, 27(9):60–69, 1994.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="jacob-2003-codereview" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id33"&gt;[22]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Alice L. Jacob and S. K. Pillai. Statistical process control to improve coding and code review. &lt;em&gt;Software, IEEE&lt;/em&gt;, 20(3):50–55, 2003.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="lague-1997-functionclone" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id12"&gt;[23]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Bruno Laguë, Daniel Proulx, Jean Mayrand, Ettore M. Merlo, and John Hudepohl. Assessing the benefits of incorporating function clone detection in a development process. In &lt;em&gt;Software Maintenance, 1997. Proceedings., International Conference on&lt;/em&gt;, pages 314–321, 1997.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="leffingwell-2003-managingrequirements" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[24]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Dean Leffingwell and Don Widrig. &lt;em&gt;Managing software requirements: a use case approach&lt;/em&gt;. Addison-Wesley, 2003.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="lipow-1982-faultsperloc" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id31"&gt;[25]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;M. Lipow. Number of faults per line of code. &lt;em&gt;Software Engineering, IEEE Transactions on&lt;/em&gt;, SE-8(4):437–439, 1982.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="mccabe-1976-complexity" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[26]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Thomas J. McCabe. &lt;em&gt;A complexity measure. Software Engineering, IEEE Transactions on&lt;/em&gt;, SE-2(4):308–320, 1976.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="nagappan-2005-codechurn" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[27]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Nachiappan Nagappan and Thomas Ball. Use of relative code churn measures to predict system defect density. In &lt;em&gt;Software Engineering, 2005. ICSE 2005. Proceedings. 27th International Conference on&lt;/em&gt;, pages 284–292, 2005.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="nagappan-2008-orgstructure" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id28"&gt;[28]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Nachiappan Nagappan, Brendan Murphy, and Victor Basili. The influence of organizational structure on software quality: an empirical case study. In &lt;em&gt;Proceedings of the 30th international conference on Software engineering&lt;/em&gt;, ICSE '08, pages 521–530, New York, NY, USA, 2008. ACM.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="rosenberg-1997-oometrics" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id25"&gt;[29]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Linda H. Rosenberg and Lawrence E. Hyatt. Software quality metrics for object-oriented environments. &lt;em&gt;Crosstalk Journal&lt;/em&gt;, April 1997.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="vokolos-1998-performancetesting" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id18"&gt;[30]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Filippos I. Vokolos and Elaine J. Weyuker. Performance testing of software systems. In &lt;em&gt;Proceedings of the 1st international workshop on Software and performance&lt;/em&gt;, WOSP ’98, pages 80–87, New York, NY, USA, 1998. ACM.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="weyuker-2000-performancetesting" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id17"&gt;[31]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Elaine J. Weyuker and Filippos I. Vokolos. Experience with performance testing of software systems: issues, an approach, and case study. &lt;em&gt;Software Engineering, IEEE Transactions on&lt;/em&gt;, 26(12):1147–1156, 2000.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="williams-2001-codecoverage" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id14"&gt;[32]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;T.W. Williams, M.R. Mercer, J.P. Mucha, and R. Kapur. Code coverage, what does it mean in terms of quality? In &lt;em&gt;Reliability and Maintainability Symposium&lt;/em&gt;, pages 420–424, 2001.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="zhu-1997-testcoverage" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id19"&gt;[33]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Hong Zhu, Patrick A. V. Hall, and John H. R. May. Software unit test coverage and adequacy. &lt;em&gt;ACM Computing Surveys&lt;/em&gt;, 29(4):366–427, Dec. 1997.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="zimmerman-2011-dependency-neighborhoods" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[34]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id32"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id35"&gt;2&lt;/a&gt;)&lt;/em&gt; T. Zimmerman, N. Nagappan, K. Herzig, R. Premraj, and L. Williams. An empirical study on the relation between dependency neighborhoods and failures. In &lt;em&gt;Software Testing, Verification and Validation (ICST), 2011 IEEE Fourth International Conference on&lt;/em&gt;, pages 347–356, 2011.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="writing"></category><category term="grad school"></category><category term="metrics"></category><category term="quality"></category><category term="software engineering"></category><category term="survey"></category></entry><entry><title>A Survey on Software Quality</title><link href="https://gdub.github.io/thegarywilson.com/blog/2013/a-survey-on-software-quality/" rel="alternate"></link><published>2013-04-07T02:57:24-05:00</published><updated>2013-04-07T02:57:24-05:00</updated><author><name>Gary Wilson Jr.</name></author><id>tag:gdub.github.io,2013-04-07:/thegarywilson.com/blog/2013/a-survey-on-software-quality/</id><summary type="html">&lt;p&gt;Want to help me graduate, and make the software industry a better place for us all?&lt;/p&gt;
&lt;p&gt;Great!  I am writing my graduate report on the topic of software quality, metrics, and visualization.
The report will include a write-up on the results of the survey distributed here,
an evaluation of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Want to help me graduate, and make the software industry a better place for us all?&lt;/p&gt;
&lt;p&gt;Great!  I am writing my graduate report on the topic of software quality, metrics, and visualization.
The report will include a write-up on the results of the survey distributed here,
an evaluation of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how software-industry professionals define software quality&lt;/li&gt;
&lt;li&gt;how software methods, metrics, and visualizations are used within teams for software quality improvement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The survey is about 25 questions long and takes about 10 minutes
to complete.  You can find the survey at:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit April 10, 2013:&lt;/strong&gt; The survey is now closed, thanks to all that participated!&lt;/p&gt;
&lt;p&gt;I would appreciate your help in distributing this survey to others you know in
the software industry who would be interested in helping with this research on
software quality.  Results from the survey will be posted here next month.&lt;/p&gt;
&lt;p&gt;If interested in reading more on the subject, I encourage you to take a look
at my &lt;a class="reference external" href="/tags/metrics/"&gt;previous posts about metrics&lt;/a&gt;, including a case study of Django and
cyclomatic complexity metrics for Python code.&lt;/p&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
</content><category term="writing"></category><category term="django"></category><category term="grad school"></category><category term="metrics"></category><category term="python"></category><category term="quality"></category><category term="software engineering"></category><category term="survey"></category></entry><entry><title>Software Metrics: A Django Case Study</title><link href="https://gdub.github.io/thegarywilson.com/blog/2012/software-metrics-a-django-case-study/" rel="alternate"></link><published>2012-03-23T02:48:51-05:00</published><updated>2012-03-23T02:48:51-05:00</updated><author><name>Gary Wilson Jr.</name></author><id>tag:gdub.github.io,2012-03-23:/thegarywilson.com/blog/2012/software-metrics-a-django-case-study/</id><summary type="html">&lt;p&gt;With the permission of the other authors, I'd like to share with you a couple of reports written for an assignment in the Software Measurement and Metrics graduate course I took last semester.
For this project, our class split into two teams that each performed their own case study on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the permission of the other authors, I'd like to share with you a couple of reports written for an assignment in the Software Measurement and Metrics graduate course I took last semester.
For this project, our class split into two teams that each performed their own case study on the &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django project&lt;/a&gt;.
The reports were submitted in November 2011, and thus analyzed code and bug data through about the end of October 2011.&lt;/p&gt;
&lt;p&gt;While I have &lt;a class="reference external" href="/blog/2006/cyclomatic-complexity-of-django/"&gt;previously analyzed Django's complexity&lt;/a&gt; (using a &lt;a class="reference external" href="/blog/2006/cyclomatic-complexity-for-python-code/"&gt;hack of some existing complexity scripts&lt;/a&gt;), the case studies presented here analyze several aspects of the Django project, including code size, code complexity, component quality, and test coverage.&lt;/p&gt;
&lt;div class="section" id="reports"&gt;
&lt;h2&gt;Reports&lt;/h2&gt;
&lt;p&gt;Below you will find excerpts describing the motivations for each report, followed by links to the full PDF versions of the reports.&lt;/p&gt;
&lt;div class="section" id="team-a"&gt;
&lt;h3&gt;Team A&lt;/h3&gt;
&lt;p&gt;Written by Eric Huneke, Brendan Long, and Gary Wilson Jr.&lt;/p&gt;
&lt;blockquote&gt;
This report describes our case study of Django, an open source web application framework written in Python. The overall goal of our study was a data-driven exploration of Django's code base, issue tracker, and wiki space, targeted to answer our research questions related to code size, complexity, and defect counts. We explored both the current state and the history of the Django project's artifacts, and produced several visualizations of the most interesting data.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gdub.github.io/thegarywilson.com/blog/2012/software-metrics-a-django-case-study/django_case_study_team_a.pdf"&gt;Download report&lt;/a&gt; (815K, 19 pages).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="team-b"&gt;
&lt;h3&gt;Team B&lt;/h3&gt;
&lt;p&gt;Written by Kevin Boos, Richard Campbell, Evan Grim, and Hasanain A. Jwair.&lt;/p&gt;
&lt;blockquote&gt;
Our motivation for conducting this case study, aside from the obvious assignment requirements, is to answer a variety of research questions corresponding to several standard software metrics: code size, modularity, complexity, unit test coverage, and component quality relative to defect quantity. We believe that obtaining and analyzing data from the Django repositories and databases will allow us to generate graphical representations of important relationships between developer behavior, component organization, testing and debugging procedures, and a wide variety of other project characteristics. From these relationships, we can then draw conclusions about how to improve the software development process and other facets of the Django project.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gdub.github.io/thegarywilson.com/blog/2012/software-metrics-a-django-case-study/django_case_study_team_b.pdf"&gt;Download report&lt;/a&gt; (2.4M, 25 pages).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;I encourage you to browse through the reports and their visualizations.  For the impatient, the teams' conclusions were as follows:&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Team A&lt;/h3&gt;
&lt;blockquote&gt;
This report presented the data we collected as part of a case study examining various aspects of Django, an open source web application framework. We found that the codebase has been growing at a steady rate since its start and will likely continue to grow. Overall complexity has been manageable, with just a few files containing egregiously complex functions. A refactoring effort focused on the files presented in table 4.1 is recommended. Ticket data relating to Django reflect basic intuitions about how they should behave. We were able to get a rough measure of component quality by looking at the number of tickets relating to each component, and showed that the top three components by ticket count (documentation, database layer, and contrib.admin) accounted for over 40% of all reported tickets. Test coverage of Django's components is high, with most components having at least 95% coverage. Coverage has trended upward for almost the entire project's history, and saw an extreme increase in the time periods before its 1.0 release.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Team B&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;This case study of the Django project, an open-source web development framework composed in Python, has presented a wide variety of statistically-significant data. To measure code size, rate of growth, complexity, and maintainability, we used Django's source control repository to analyze historical revisions since 2005. To analyze defect tracking, we looked at ticket records dating to the beginning of the Django project. For unit testing coverage, coding standards, and style guidelines analysis, we analyzed source code that was extracted from the Django subversion server on October 31, 2011.&lt;/p&gt;
&lt;p&gt;We found that the size of the project has greatly increased since its start, but that the rate of increase has decreased over time. The largest component with approximately half of the code is the contrib component which could be broken up into smaller, more manageable components. The overall cyclomatic complexity of Django is 2.49 which is respectable. Complexity started out nice and increased for the first few years, but has decreased since the initial increase. Some modules, though, have high complexities which should be reduced if possible.&lt;/p&gt;
&lt;p&gt;The ticket data showed that the majority of the tickets opened were for defects. When looking at only the defect tickets, we found 4 components out of 48 had almost 60% of the defects opened against them. The core and database components have the most defects per SLOC, so improving code quality in these areas will greatly reduce the overall number of defects in the Django project.&lt;/p&gt;
&lt;p&gt;As a whole, we found that the Django code is well covered by its test cases. The component with the lowest coverage, contrib.admin, was also found to be one of the components with the highest number of defects opened against it. Improving test coverage may reduce the number of tickets opened.&lt;/p&gt;
&lt;p&gt;We found that python coding standards and style conventions are poorly followed by Django developers. Additionally, Django code is poorly commented, only 7% of the total lines of the code base were comment lines. We also found that the amount of documentation is not consistent throughout the code elements, while most of the methods are documented, less than half the modules and classes have documentations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="writing"></category><category term="django"></category><category term="grad school"></category><category term="metrics"></category><category term="python"></category></entry><entry><title>Cyclomatic complexity of Django</title><link href="https://gdub.github.io/thegarywilson.com/blog/2006/cyclomatic-complexity-of-django/" rel="alternate"></link><published>2006-07-09T00:48:00-05:00</published><updated>2006-07-09T00:48:00-05:00</updated><author><name>Gary Wilson Jr.</name></author><id>tag:gdub.github.io,2006-07-09:/thegarywilson.com/blog/2006/cyclomatic-complexity-of-django/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://groups.google.com/group/django-developers/browse_thread/thread/1026181083385c58/"&gt;Adrian's recent post&lt;/a&gt; on the dev mailing list about the code within &lt;tt class="docutils literal"&gt;django.db.models&lt;/tt&gt; got me remembering some other &amp;quot;monstrous&amp;quot; functions I've seen while browsing the Django source.  Guess no more as to the most monstrous functions of Django because below are the results of my &lt;a class="reference external" href="http://gdub.wordpress.com/2006/07/09/cyclomatic-complexity-for-python-code/"&gt;previously posted complexity …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://groups.google.com/group/django-developers/browse_thread/thread/1026181083385c58/"&gt;Adrian's recent post&lt;/a&gt; on the dev mailing list about the code within &lt;tt class="docutils literal"&gt;django.db.models&lt;/tt&gt; got me remembering some other &amp;quot;monstrous&amp;quot; functions I've seen while browsing the Django source.  Guess no more as to the most monstrous functions of Django because below are the results of my &lt;a class="reference external" href="http://gdub.wordpress.com/2006/07/09/cyclomatic-complexity-for-python-code/"&gt;previously posted complexity.py script&lt;/a&gt; when run on the Django source.&lt;/p&gt;
&lt;p&gt;Here are all 80 of the functions and methods of Django that are of moderate risk or higher:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Showing functions/methods with complexity greater than or equal to 11:

Filename                                    Function/Method                              Lines of Code Complexity
./core/management.py                        get_validation_errors                                  146         78
./db/models/manipulators.py                 AutomaticManipulator.save                               97         43
./contrib/comments/templatetags/comments.py DoCommentForm.__call__                                  51         31
./views/i18n.py                             javascript_catalog                                      68         28
./contrib/admin/views/main.py               change_stage                                            75         28
./utils/translation/trans_real.py           translation                                             62         26
./bin/make-messages.py                      make_messages                                          114         26
./contrib/admin/views/main.py               _get_deleted_objects                                    65         25
./core/handlers/base.py                     BaseHandler.get_response                                50         24
./views/defaults.py                         shortcut                                                40         23
./contrib/auth/create_superuser.py          createsuperuser                                         64         23
./core/management.py                        inspectdb                                               84         23
./contrib/admin/views/doc.py                model_detail                                            64         22
./templatetags/i18n.py                      do_block_translate                                      41         21
./core/management.py                        syncdb                                                  61         21
./core/management.py                        execute_from_command_line                               74         21
./views/generic/create_update.py            update_object                                           54         20
./contrib/admin/views/decorators.py         staff_member_required                                   44         20
./utils/simplejson/decoder.py               scanstring                                              41         19
./contrib/admin/views/main.py               add_stage                                               51         19
./core/validators.py                        RelaxNGCompact.__call__                                 51         19
./db/models/query.py                        lookup_inner                                           107         19
./db/models/query.py                        delete_objects                                          48         19
./template/__init__.py                      TokenParser.value                                       61         18
./utils/simplejson/decoder.py               JSONObject                                              37         18
./utils/decorators.py                       decorator_from_middleware                               25         18
./contrib/comments/templatetags/comments.py DoGetCommentList.__call__                               31         18
./contrib/comments/views/comments.py        post_comment                                            66         18
./utils/translation/trans_real.py           get_language_from_request                               40         17
./core/mail.py                              send_mass_mail                                          31         17
./views/generic/create_update.py            create_object                                           38         16
./views/static.py                           serve                                                   28         16
./core/servers/fastcgi.py                   runfastcgi                                              56         16
./core/management.py                        get_sql_delete                                          49         16
./db/models/query.py                        QuerySet.__getitem__                                    38         16
./utils/simplejson/encoder.py               floatstr                                                17         15
./utils/simplejson/encoder.py               JSONEncoder._iterencode_dict                            49         15
./views/generic/create_update.py            delete_object                                           36         15
./contrib/comments/templatetags/comments.py DoCommentCount.__call__                                 25         15
./db/models/fields/related.py               create_many_related_manager                             73         15
./db/models/query.py                        QuerySet._get_sql_clause                                54         15
./middleware/common.py                      CommonMiddleware.process_request                        22         14
./template/__init__.py                      Parser.parse                                            35         14
./template/defaulttags.py                   do_if                                                   33         14
./template/defaulttags.py                   cycle                                                   25         14
./views/generic/date_based.py               object_detail                                           43         14
./contrib/comments/views/comments.py        post_free_comment                                       41         14
./contrib/admin/templatetags/admin_list.py  items_for_result                                        59         14
./contrib/admin/views/main.py               get_javascript_imports                                  23         14
./contrib/admin/views/main.py               ChangeList.get_query_set                                39         14
./core/handlers/base.py                     BaseHandler.load_middleware                             32         14
./db/models/base.py                         Model.__init__                                          33         14
./template/defaulttags.py                   SsiNode.render                                          21         13
./views/generic/list_detail.py              object_list                                             46         13
./contrib/auth/handlers/modpython.py        authenhandler                                           28         13
./db/models/fields/__init__.py              Field.get_manipulator_fields                            24         13
./db/models/base.py                         ModelBase.__new__                                       26         13
./dispatch/saferef.py                       safeRef                                                 65         12
./dispatch/dispatcher.py                    _removeOldBackRefs                                      20         12
./template/loader.py                        find_template_source                                    26         12
./template/defaulttags.py                   IfNode.render                                           21         12
./utils/timesince.py                        timesince                                               34         12
./views/generic/date_based.py               archive_month                                           36         12
./core/management.py                        _get_sql_model_create                                   44         12
./conf/__init__.py                          Settings.__init__                                       26         12
./db/models/fields/__init__.py              DateTimeField.to_python                                 14         12
./db/models/related.py                      RelatedObject.get_list                                  21         12
./db/models/options.py                      Options.has_field_type                                  16         12
./dispatch/dispatcher.py                    connect                                                 34         11
./template/defaultfilters.py                pluralize                                               18         11
./utils/simplejson/decoder.py               JSONArray                                               21         11
./views/generic/list_detail.py              object_detail                                           33         11
./views/generic/date_based.py               archive_week                                            31         11
./views/generic/date_based.py               archive_day                                             34         11
./contrib/redirects/middleware.py           RedirectFallbackMiddleware.process_response             17         11
./contrib/admin/templatetags/log.py         DoGetAdminLog.__call__                                  11         11
./db/backends/postgresql/base.py            DatabaseWrapper.cursor                                  21         11
./db/backends/postgresql_psycopg2/base.py   DatabaseWrapper.cursor                                  21         11
./db/models/fields/related.py               ReverseSingleRelatedObjectDescriptor.__get__            19         11
./db/models/query.py                        get_where_clause                                        18         11
&lt;/pre&gt;
</content><category term="writing"></category><category term="cyclomatic complexity"></category><category term="metrics"></category><category term="django"></category></entry><entry><title>Cyclomatic complexity for Python code</title><link href="https://gdub.github.io/thegarywilson.com/blog/2006/cyclomatic-complexity-for-python-code/" rel="alternate"></link><published>2006-07-09T00:37:00-05:00</published><updated>2006-07-09T00:37:00-05:00</updated><author><name>Gary Wilson Jr.</name></author><id>tag:gdub.github.io,2006-07-09:/thegarywilson.com/blog/2006/cyclomatic-complexity-for-python-code/</id><summary type="html">&lt;p&gt;We all know that maintenance is the biggest cost of software.  You can keep the maintenance cost of your program down by writing readable code.  More readable code means faster bug fixing, which leads to more time for adding new bugs.&lt;/p&gt;
&lt;p&gt;One measure of readability is &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;cyclomatic complexity&lt;/a&gt;, a software …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We all know that maintenance is the biggest cost of software.  You can keep the maintenance cost of your program down by writing readable code.  More readable code means faster bug fixing, which leads to more time for adding new bugs.&lt;/p&gt;
&lt;p&gt;One measure of readability is &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;cyclomatic complexity&lt;/a&gt;, a software metric that measures a program's complexity based on the number of distinct paths or branches in the code.  &lt;a class="reference external" href="http://www.sei.cmu.edu/str/descriptions/cyclomatic_body.html"&gt;Carnegie Mellon's Software Engineering Institute&lt;/a&gt; defines the following complexity risk levels:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="38%" /&gt;
&lt;col width="63%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Cyclomatic Complexity&lt;/th&gt;
&lt;th class="head"&gt;Risk Evaluation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1-10&lt;/td&gt;
&lt;td&gt;a simple program, without much risk&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;11-20&lt;/td&gt;
&lt;td&gt;more complex, moderate risk&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;21-50&lt;/td&gt;
&lt;td&gt;complex, high risk program&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;greater than 50&lt;/td&gt;
&lt;td&gt;untestable program (very high risk)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I have written a python script that takes &lt;a class="reference external" href="http://www.journyx.com/curt/complexity.html"&gt;these complexity scripts&lt;/a&gt; a bit further by printing the most complex functions/methods in an entire Python package specified on the command line.  Save the following as &lt;tt class="docutils literal"&gt;complexity.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Find the most complex functions/methods in your python code.&lt;/span&gt;

&lt;span class="sd"&gt;This program is offered freely into the public domain by&lt;/span&gt;
&lt;span class="sd"&gt;Gary Wilson (gary.wilson@gmail.com).&lt;/span&gt;

&lt;span class="sd"&gt;This code requires the complexity shell scripts found at&lt;/span&gt;
&lt;span class="sd"&gt;http://journyx.com/curt/complexity.html&lt;/span&gt;
&lt;span class="sd"&gt;Download the four files and then specify the path to the&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;complexity&amp;quot; script below, as PATH_TO_COMPLEXITY.&lt;/span&gt;

&lt;span class="sd"&gt;Note: To get the scripts to work for me I had to change the line&lt;/span&gt;
&lt;span class="sd"&gt;open (T,&amp;quot;|$dn/tab|sort -n +5&amp;quot;) || die &amp;quot;no tab?&amp;quot;;&lt;/span&gt;
&lt;span class="sd"&gt;to&lt;/span&gt;
&lt;span class="sd"&gt;open (T,&amp;quot;|$dn/tab|sort -n -k 6&amp;quot;) || die &amp;quot;no tab?&amp;quot;;&lt;/span&gt;
&lt;span class="sd"&gt;This line appears once in &amp;quot;complexdef&amp;quot; and twice in &amp;quot;complexdefclass&amp;quot;.&lt;/span&gt;

&lt;span class="sd"&gt;Example uses:&lt;/span&gt;

&lt;span class="sd"&gt;Search the current directory.&lt;/span&gt;
&lt;span class="sd"&gt;python complexity.py&lt;/span&gt;

&lt;span class="sd"&gt;Search the mypythonpackage package.&lt;/span&gt;
&lt;span class="sd"&gt;python complexity.py ~/mypythonpackage&lt;/span&gt;

&lt;span class="sd"&gt;You can also specify multiple files and/or directories.&lt;/span&gt;
&lt;span class="sd"&gt;python complexity.py ~/mypythonpackage /src/myscript.py&lt;/span&gt;

&lt;span class="sd"&gt;This script will search for all files ending in &amp;quot;.py&amp;quot; within the&lt;/span&gt;
&lt;span class="sd"&gt;paths specified on the command line.  All functions and methods will&lt;/span&gt;
&lt;span class="sd"&gt;be sorted by decreasing complexity and printed along with the&lt;/span&gt;
&lt;span class="sd"&gt;filename and number of lines of code.&lt;/span&gt;

&lt;span class="sd"&gt;By default, this script will print out all functions/methods found.&lt;/span&gt;
&lt;span class="sd"&gt;If you would rather only see functions/methods with a certain&lt;/span&gt;
&lt;span class="sd"&gt;complexity or above, then change the COMPLEXITY_LEVEL setting below.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;## User Settings ###########################################&lt;/span&gt;
&lt;span class="n"&gt;PATH_TO_COMPLEXITY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~/complex/complexity&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Only show functions/methods with a complexity greater than or&lt;/span&gt;
&lt;span class="c1"&gt;# equal to COMPLEXITY_LEVEL.  Setting to 0 will print all functions/methods.&lt;/span&gt;
&lt;span class="n"&gt;COMPLEXITY_LEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="c1"&gt;############################################################&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;complexity_for_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PATH_TO_COMPLEXITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;close_fds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;reached_functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;function_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Funcname|Classless_Function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;function_header&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;reached_functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;reached_functions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="c1"&gt;# We don&amp;#39;t want the header lines.&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="c1"&gt;# filename, function name, lines of code, and complexity.&lt;/span&gt;
            &lt;span class="n"&gt;tuples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tuples&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_functions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;complexity_for_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_column_widths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;widths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;widths&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])):&lt;/span&gt;
        &lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;widths&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_print_parms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;parms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;parms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;parms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;function_tuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expanduser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_to_functions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;function_tuples&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;complexity_for_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Filter out functions less than desired complexity level.&lt;/span&gt;
    &lt;span class="n"&gt;function_tuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;COMPLEXITY_LEVEL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# Sort by complexity.&lt;/span&gt;
    &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Showing functions/methods with complexity greater than or equal to &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;COMPLEXITY_LEVEL&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Filename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Function/Method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lines of Code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Complexity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;widths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_column_widths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_tuples&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%-*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%-*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%*s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;get_print_parms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function_tuples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%-*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%-*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%*s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%*s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;get_print_parms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;None.&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="writing"></category><category term="cyclomatic complexity"></category><category term="metrics"></category><category term="python"></category></entry></feed>